#
# Rule format :
#
# For more information about the fields described above and their meaning,
# please have a look to the IDMEF Draft located at :
#
# http://www.silicondefense.com/idwg/draft-ietf-idwg-idmef-xml-07.txt
#
# If one of the IDMEF field you wish to add information too isn't covered in
# the rule language, please take the 5 minutes needed to implement a simple
# parsing function to the simple.c plugin distributed with Prelude LML.
#
#
# - regex:
#   A PCRE regex that should be matched to trigger the alert.
#
# - class.name: 
#   The name of the alert, from one of the origins listed below.
#
# - class.origin:
#   The source from which the name of the alert originates. 
#   Possible values are: unknown, bugtraqid, cve, vendor-specific. Default is unknown.
#
# - class.url:
#   A URL at which the manager (or the human
#   operator of the manager) can find additional information about the
#   alert.  The document pointed to by the URL may include an in-depth
#   description of the attack, appropriate countermeasures, or other
#   information deemed relevant by the vendor.
# 
# - impact.severity:
#   An estimate of the relative severity of the event.
#   Possible values are: low, medium, high.
#
# - impact.completion:
#   An indication of whether the analyzer believes the attempt that
#   the event describes was successful or not.
#   The permitted values are: failed, succeeded.
#
# - impact.type:
#   The type of attempt represented by this event, in relatively broad categories.
#   The permitted values are: admin, dos, file, recon, user, other.
#
# - impact.description:
#   May contain a textual description of the impact, if the analyzer
#   is able to provide additional details.
#
# - source.node.address.address:
#   Address that issued the attack.
#   There can be more than one.
# 
# - target.node.address.address:
#   Address that has been attacked.
#   There can be more than one.
#
# - source.node.name,
#   target.node.name:
#   The name of the equipment. This information MUST be provided if no Address
#   information is given.
#
# - source.node.category,
#   target.node.category:
#   The domain from which the name information was obtained.
#   Possible values are: unknow, ads, afs, coda, dfs, dns, hosts, kerberos,
#   nds, nis, nisplus, nt, wfw
#
# - source.node.location,
#   target.node.location:
#   The location of the equipment.
#
# - source.spoofed,
#   target.decoy:
#   An indication of wheter the source/target is a decoy.
#   The permitted values are: unknown, yes, no.
#
# - source.interface,
#   target.interface:
#   May be used by a network-based analyzer with multiple interfaces to
#   indicate which interfaces this source/target was seen on.
#
# - source.service.name,
#   target.service.name:
#   The name of the service. Whenever possible, the name from the IANA list
#   of well-known ports SHOULD be used.
#
# - source.service.port,
#   target.service.port:
#   The port number being used.
#
# - source.service.protocol,
#   target.service.protocol:
#   The protocol being used.
#
# - source.service.portlist,
#   target.service.portlist:
#   A list of port numbers beeing used.
#
# - source.user.category,
#   target.user.category:
#   The type of user represented (unknown, application, os-device).
#
# - source.user.userid,
#   target.user.userid:
#   Create a new UserId inside an User object (that may contain several UserId).
#
# - source.user.userid.type,
#   target.user.userid.type:
#   The type of user information represented (current-user, original-user, target-user,
#   user-privs, current-group, group-privs, other-privs).
#
# - source.user.userid.name,
#   target.user.userid.name:
#   A user or group name.
#
# - source.user.userid.number,
#   target.user.userid.number:
#   A user or group number.


include = cisco.rules;
include = zyxel.rules;
include = ipfw.rules;
include = netfilter.rules;
include = grsecurity.rules;

regex=session opened for user root; class.name=Root login; impact.completion = succeeded; impact.type = admin; impact.severity = medium;

regex=PAM_unix\[([0-9]+)\][^(]+\(uid=([0-9]+)\) -> ([^ ]+); class.name=Authentication Failure; impact.completion = failed; impact.type = other; impact.severity = high; impact.description=Process $1 attempted to change UID from $2 to $3; 

regex=entered promiscuous mode; class.name=Promiscuous mode detected; impact.completion = succeeded; impact.type = other; impact.severity = medium; impact.description=A sniffer is probably running on this machine;

regex=no such user; class.name=Invalid User; impact.completion = failed; impact.type = other; impact.severity = medium; impact.description = Someone tried to log in using a non existing user;
