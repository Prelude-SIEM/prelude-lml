#####
#
# Copyright (C) 2002, 2003 Laurent Oudot <oudot.laurent@wanadoo.fr>
# All Rights Reserved
#
# This file is part of the Prelude program.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
#
#####

# Linux Netfilter support for Prelude-LML

# This has been made by matching printk policy in the kernel sources.
# You can try and read ipt_log_target which is the point of entry for netfilter
# on a 2.4.x kernel in the file net/ipv4/netfilter/ipt_LOG.c

## Part I : Packet Matching with improved pattern research
#  
#  Owing to a specific way of writing iptables rules, you can improve 
#  the pattern matching of prelude-lml in your logs by specifying few things 
#  like : was the packet dropped or accepted ? 
#  
#  In order to benefit from this improvement, you have to pay attention 
#  for netfilter rules that you will create. 
#  If you want to log packet using the LOG target with iptables,
#  just respect this proposition 
#  (that you can change if you master all of that) :
#
#  If you use a LOG target for a packet that you Accept 
#  then add an "Accept " prefix to your rules:
#     -j LOG --log-prefix "Accept "
#
#  If you use a LOG target for a packet that you Drop 
#  then add an "Drop " prefix to your rules:
#     -j LOG --log-prefix "Drop "
#

# Netfilter TCP Matching
# No log sample; please submit
regex=Accept IN=(\w*) OUT=(\w*) MAC=([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=TCP (INCOMPLETE \[\d+ bytes\] )?SPT=(\d+) DPT=(\d+) (SEQ=\d+ ACK=\d+ )?WINDOW=(\d+) RES=(\w+) (CWR )?(ECE )?(URG )?(ACK )?(PSH )?(RST )?(SYN )?(FIN )?URGP=(\d+) (OPT \(\w+\) )?.*; \
 class.name=TCP packet accepted; \
 class.origin=vendor-specific; \
 impact.completion=failed; \
 impact.type=other; \
 impact.severity=medium; \
 impact.description=Netfilter accepted a TCP packet $4:$17 -> $5:$18 [$24 $25 $26 $27 $28 $29] on interface $1$2 [ TTL=$9 ]; \
 source.node.address; \
 source.node.address.category=ipv4-addr; \
 source.node.address.address=$4; \
 source.service.port=$17; \
 source.service.protocol=TCP; \
 target.interface=$1; \
 target.node.address; \
 target.node.address.category=ipv4-addr; \
 target.node.address.address=$5; \
 target.service.port=$18; \
 target.service.protocol=TCP; \
 last

# No log sample; please submit
regex=Drop IN=(\w*) OUT=(\w*) MAC=([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=TCP (INCOMPLETE \[\d+ bytes\] )?SPT=(\d+) DPT=(\d+) (SEQ=\d+ ACK=\d+ )?WINDOW=(\d+) RES=(\w+) (CWR )?(ECE )?(URG )?(ACK )?(PSH )?(RST )?(SYN )?(FIN )?URGP=(\d+) (OPT \(\w+\) )?.*; \
 class.name=TCP packet dropped; \
 class.origin=vendor-specific; \
 impact.completion=failed; \
 impact.type=other; \
 impact.severity=medium; \
 impact.description=Netfilter dropped a TCP packet $4:$17 -> $5:$18 [$24 $25 $26 $27 $28 $29] on interface $1$2 [ TTL=$9 ]; \
 source.node.address; \
 source.node.address.category=ipv4-addr; \
 source.node.address.address=$4; \
 source.service.port=$17; \
 source.service.protocol=TCP; \
 target.interface=$1; \
 target.node.address; \
 target.node.address.category=ipv4-addr; \
 target.node.address.address=$5; \
 target.service.port=$18; \
 target.service.protocol=TCP; \
 last

# Netfilter UDP Matching 
# No log sample; please submit
regex=Accept IN=(\w*) OUT=(\w*) MAC=([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=UDP (INCOMPLETE \[\d+ bytes\] )?SPT=(\d+) DPT=(\d+) LEN=(\d+).*; \
 class.name=UDP packet accepted; \
 class.origin=vendor-specific; \
 impact.completion=failed; \
 impact.type=other; \
 impact.severity=medium; \
 impact.description=Netfilter accepted an UDP packet $4:$17 -> $5:$18 on interface $1$2 [TTL=$9]; \
 source.node.address; \
 source.node.address.category=ipv4-addr; \
 source.node.address.address=$4; \
 source.service.port=$17; \
 source.service.protocol=UDP; \
 target.interface=$1; \
 target.node.address; \
 target.node.address.category=ipv4-addr; \
 target.node.address.address=$5; \
 target.service.port=$18; \
 target.service.protocol=UDP; \
 last

# No log sample; please submit
regex=Drop IN=(\w*) OUT=(\w*) MAC=([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=UDP (INCOMPLETE \[\d+ bytes\] )?SPT=(\d+) DPT=(\d+) LEN=(\d+).*; \
 class.name=UDP packet dropped; \
 class.origin=vendor-specific; \
 impact.completion=failed; \
 impact.type=other; \
 impact.severity=medium; \
 impact.description=Netfilter dropped an UDP packet $4:$17 -> $5:$18 on interface $1$2 [TTL=$9]; \
 source.node.address; \
 source.node.address.category=ipv4-addr; \
 source.node.address.address=$4; \
 source.service.port=$17; \
 source.service.protocol=UDP; \
 target.interface=$1; \
 target.node.address; \
 target.node.address.category=ipv4-addr; \
 target.node.address.address=$5; \
 target.service.port=$18; \
 target.service.protocol=UDP; \
 last

# Netfilter ICMP Matching 
# No log sample; please submit
regex=Accept IN=(\w*) OUT=(\w*) MAC=([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=ICMP (INCOMPLETE \[\d+ bytes\] )?TYPE=(\d+) CODE=(\d+) (INCOMPLETE \[\d+ bytes\] )?(ID=\d+ SEQ=\d+ )?(PARAMETER=\d+ )?(GATEWAY=[\d\.]+ )?(\[\w+\])?(MTU=\d+ )?.*; \
 class.name=ICMP packet accepted; \
 class.origin=vendor-specific; \
 impact.completion=failed; \
 impact.type=other; \
 impact.severity=medium; \
 impact.description=Netfilter accepted an ICMP packet $4 -> $5 type=$17 code=$18 on interface $1$2 [TTL=$9]; \
 source.node.address; \
 source.node.address.category=ipv4-addr; \
 source.node.address.address=$4; \
 source.service.protocol=ICMP; \
 target.interface=$1; \
 target.node.address; \
 target.node.address.category=ipv4-addr; \
 target.node.address.address=$5; \
 target.service.protocol=ICMP; \
 last

# No log sample; please submit
regex=Drop IN=(\w*) OUT=(\w*) MAC=([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=ICMP (INCOMPLETE \[\d+ bytes\] )?TYPE=(\d+) CODE=(\d+) (INCOMPLETE \[\d+ bytes\] )?(ID=\d+ SEQ=\d+ )?(PARAMETER=\d+ )?(GATEWAY=[\d\.]+ )?(\[\w+\])?(MTU=\d+ )?.*; \
 class.name=ICMP packet dropped; \
 class.origin=vendor-specific; \
 impact.completion=failed; \
 impact.type=other; \
 impact.severity=medium; \
 impact.description=Netfilter dropped an ICMP packet $4 -> $5 type=$17 code=$18 on interface $1$2 [TTL=$9]; \
 source.node.address; \
 source.node.address.category=ipv4-addr; \
 source.node.address.address=$4; \
 source.service.protocol=ICMP; \
 target.interface=$1; \
 target.node.address; \
 target.node.address.category=ipv4-addr; \
 target.node.address.address=$5; \
 target.service.protocol=ICMP; \
 last

#
## End of Part I


## Part II : Usual matching with no improvement
#  
#  The trouble here is that we don't know what is really matched : an accepted or a dropped packet...
#  Netfilter does not talk about that, but can even match them to improve intrusion detection easily.
#  

# Netfilter TCP Matchinga
# No log sample; please submit  
regex=(?<!Accept )(?<!Drop )IN=(\w*) OUT=(\w*) MAC=([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=TCP (INCOMPLETE \[\d+ bytes\] )?SPT=(\d+) DPT=(\d+) (SEQ=\d+ ACK=\d+ )?WINDOW=(\d+) RES=(\w+) (CWR )?(ECE )?(URG )?(ACK )?(PSH )?(RST )?(SYN )?(FIN )?URGP=(\d+) (OPT \(\w+\) )?.*; \
 class.name=TCP packet matched; \
 class.origin=vendor-specific; \
 impact.completion=failed; \
 impact.type=other; \
 impact.severity=medium; \
 impact.description=Matching TCP packet $4:$17 -> $5:$18 [$24 $25 $26 $27 $28 $29] on interface $1$2 [ TTL=$9 ]; \
 source.node.address; \
 source.node.address.category=ipv4-addr; \
 source.node.address.address=$4; \
 source.service.port=$17; \
 source.service.protocol=TCP; \
 target.interface=$1; \
 target.node.address; \
 target.node.address.category=ipv4-addr; \
 target.node.address.address=$5; \
 target.service.port=$18; \
 target.service.protocol=TCP; \
 last

# Netfilter UDP Matching 
# No log sample; please submit
regex=(?<!Accept )(?<!Drop )IN=(\w*) OUT=(\w*) MAC=([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=UDP (INCOMPLETE \[\d+ bytes\] )?SPT=(\d+) DPT=(\d+) LEN=(\d+).*; \
 class.name=UDP packet matched; \
 class.origin=vendor-specific; \
 impact.completion=failed; \
 impact.type=other; \
 impact.severity=medium; \
 impact.description=Matching UDP packet $4:$17 -> $5:$18 on interface $1$2 [TTL=$9]; \
 source.node.address; \
 source.node.address.category=ipv4-addr; \
 source.node.address.address=$4; \
 source.service.port=$17; \
 source.service.protocol=UDP; \
 target.interface=$1; \
 target.node.address; \
 target.node.address.category=ipv4-addr; \
 target.node.address.address=$5; \
 target.service.port=$18; \
 target.service.protocol=UDP; \
 last

# Netfilter ICMP Matching 
# No log sample; please submit
regex=(?<!Accept )(?<!Drop )IN=(\w*) OUT=(\w*) MAC=([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=ICMP (INCOMPLETE \[\d+ bytes\] )?TYPE=(\d+) CODE=(\d+) (INCOMPLETE \[\d+ bytes\] )?(ID=\d+ SEQ=\d+ )?(PARAMETER=\d+ )?(GATEWAY=[\d\.]+ )?(\[\w+\])?(MTU=\d+ )?.*; \
 class.name=ICMP packet matched; \
 class.origin=vendor-specific; \
 impact.completion=failed; \
 impact.type=other; \
 impact.severity=medium; \
 impact.description=Matching ICMP packet $4 -> $5 type=$17 code=$18 on interface $1$2 [TTL=$9]; \
 source.node.address; \
 source.node.address.category=ipv4-addr; \
 source.node.address.address=$4; \
 source.service.protocol=ICMP; \
 target.interface=$1; \
 target.node.address; \
 target.node.address.category=ipv4-addr; \
 target.node.address.address=$5; \
 target.service.protocol=ICMP; \
 last

# Netfilter AH and ESP Matching for IPSEC
# No log sample; please submit
regex=IN=(\w*) OUT=(\w*) MAC=([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=(AH|ESP) (INCOMPLETE \[\d+ bytes\] )?SPI=(\w+).*; \
 class.name=$16 packet matched; \
 class.origin=vendor-specific; \
 impact.completion=failed; \
 impact.type=other; \
 impact.severity=medium; \
 impact.description=Matching $16 packet $4 -> $5 SPI=$18 on interface $1$2 [TTL=$9]; \
 source.node.address; \
 source.node.address.category=ipv4-addr; \
 source.node.address.address=$4; \
 source.service.protocol=$16; \
 target.interface=$1; \
 target.node.address; \
 target.node.address.category=ipv4-addr; \
 target.node.address.address=$5; \
 target.service.protocol=$16; \
 last

# Other protocols matched by Netfilter
regex=IN=(\w*) OUT=(\w*) MAC=([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=(\d+).*; \
 class.name=$16 packet matched; \
 class.origin=vendor-specific; \
 impact.completion=failed; \
 impact.type=other; \
 impact.severity=medium; \
 impact.description=Matching a packet from the protocol number $16 : $4 -> $5 on interface $1$2 [TTL=$9]; \
 source.node.address; \
 source.node.address.category=ipv4-addr; \
 source.node.address.address=$4; \
 source.service.protocol=$16; \
 target.interface=$1; \
 target.node.address; \
 target.node.address.category=ipv4-addr; \
 target.node.address.address=$5; \
 target.service.protocol=$16; \
 last

#
## End of Part II

