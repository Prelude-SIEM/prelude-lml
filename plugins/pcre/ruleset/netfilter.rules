#####
#
# Copyright (C) 2002, 2003 Laurent Oudot
# Currently supported by John Green <j.green@ukerna.ac.uk>
# All Rights Reserved
#
# This file is part of the Prelude-LML program.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
#
#####

# Linux Netfilter support for Prelude-LML

# This has been made by matching printk policy in the kernel sources.
# You can try and read ipt_log_target which is the point of entry for netfilter
# on a 2.4.x kernel in the file net/ipv4/netfilter/ipt_LOG.c

## Part I : Packet Matching with improved pattern research
#  
#  Owing to a specific way of writing iptables rules, you can improve 
#  the pattern matching of prelude-lml in your logs by specifying few things 
#  like : was the packet dropped or accepted ? 
#  
#  In order to benefit from this improvement, you have to pay attention 
#  for netfilter rules that you will create. 
#  If you want to log packet using the LOG target with iptables,
#  just respect this proposition 
#  (that you can change if you master all of that) :
#
#  If you use a LOG target for a packet that you Accept 
#  then add an "Accept " prefix to your rules:
#     -j LOG --log-prefix "Accept "
#
#  If you use a LOG target for a packet that you Drop 
#  then add an "Drop " prefix to your rules:
#     -j LOG --log-prefix "Drop "
#

# Netfilter TCP Matching
# No log sample; please submit
regex=Accept IN=(\w*) OUT=(\w*)( MAC=)?([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=TCP (INCOMPLETE \[\d+ bytes\] )?SPT=(\d+) DPT=(\d+) (SEQ=\d+ ACK=\d+ )?WINDOW=(\d+) RES=(\w+) (CWR )?(ECE )?(URG )?(ACK )?(PSH )?(RST )?(SYN )?(FIN )?URGP=(\d+); \
 classification.text=TCP packet accepted; \
 id=1300; \
 revision=2; \
 analyzer(0).name=netfilter; \
 analyzer(0).manufacturer=www.netfilter.org; \
 analyzer(0).class=Firewall; \
 assessment.impact.completion=succeeded; \
 assessment.impact.type=other; \
 assessment.impact.severity=low; \
 assessment.impact.description=Netfilter accepted a TCP packet $5:$18 -> $6:$19 [$25 $26 $27 $28 $29 $30] on interface $1$2 [ TTL=$10 ]; \
 source(0).node.address(0).category=ipv4-addr; \
 source(0).node.address(0).address=$4; \
 source(0).service.port=$18; \
 source(0).service.protocol=TCP; \
 target(0).interface=$1; \
 target(0).node.address(0).category=ipv4-addr; \
 target(0).node.address(0).address=$6; \
 target(0).service.port=$19; \
 target(0).service.protocol=TCP; \
 last

# No log sample; please submit
regex=Drop IN=(\w*) OUT=(\w*)( MAC=)?([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=TCP (INCOMPLETE \[\d+ bytes\] )?SPT=(\d+) DPT=(\d+) (SEQ=\d+ ACK=\d+ )?WINDOW=(\d+) RES=(\w+) (CWR )?(ECE )?(URG )?(ACK )?(PSH )?(RST )?(SYN )?(FIN )?URGP=(\d+); \
 classification.text=TCP packet dropped; \
 id=1301; \
 revision=2; \
 analyzer(0).name=netfilter; \
 analyzer(0).manufacturer=www.netfilter.org; \
 analyzer(0).class=Firewall; \
 assessment.impact.completion=failed; \
 assessment.impact.type=other; \
 assessment.impact.severity=medium; \
 assessment.impact.description=Netfilter dropped a TCP packet $5:$18 -> $6:$19 [$25 $26 $27 $28 $29 $30] on interface $1$2 [ TTL=$10 ]; \
 source(0).node.address(0).category=ipv4-addr; \
 source(0).node.address(0).address=$5; \
 source(0).service.port=$18; \
 source(0).service.protocol=TCP; \
 target(0).interface=$1; \
 target(0).node.address(0).category=ipv4-addr; \
 target(0).node.address(0).address=$6; \
 target(0).service.port=$19; \
 target(0).service.protocol=TCP; \
 last

# Netfilter UDP Matching 
# No log sample; please submit
regex=Accept IN=(\w*) OUT=(\w*)( MAC=)?([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=UDP (INCOMPLETE \[\d+ bytes\] )?SPT=(\d+) DPT=(\d+) LEN=(\d+); \
 classification.text=UDP packet accepted; \
 id=1302; \
 revision=2; \
 analyzer(0).name=netfilter; \
 analyzer(0).manufacturer=www.netfilter.org; \
 analyzer(0).class=Firewall; \
 assessment.impact.completion=succeeded; \
 assessment.impact.type=other; \
 assessment.impact.severity=low; \
 assessment.impact.description=Netfilter accepted an UDP packet $5:$18 -> $6:$19 on interface $1$2 [TTL=$10]; \
 source(0).node.address(0).category=ipv4-addr; \
 source(0).node.address(0).address=$5; \
 source(0).service.port=$18; \
 source(0).service.protocol=UDP; \
 target(0).interface=$1; \
 target(0).node.address(0).category=ipv4-addr; \
 target(0).node.address(0).address=$6; \
 target(0).service.port=$19; \
 target(0).service.protocol=UDP; \
 last

# No log sample; please submit
regex=Drop IN=(\w*) OUT=(\w*)( MAC=)?([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=UDP (INCOMPLETE \[\d+ bytes\] )?SPT=(\d+) DPT=(\d+) LEN=(\d+); \
 classification.text=UDP packet dropped; \
 id=1303; \
 revision=2; \
 analyzer(0).name=netfilter; \
 analyzer(0).manufacturer=www.netfilter.org; \
 analyzer(0).class=Firewall; \
 assessment.impact.completion=failed; \
 assessment.impact.type=other; \
 assessment.impact.severity=medium; \
 assessment.impact.description=Netfilter dropped an UDP packet $5:$18 -> $6:$19 on interface $1$2 [TTL=$10]; \
 source(0).node.address(0).category=ipv4-addr; \
 source(0).node.address(0).address=$5; \
 source(0).service.port=$18; \
 source(0).service.protocol=UDP; \
 target(0).interface=$1; \
 target(0).node.address(0).category=ipv4-addr; \
 target(0).node.address(0).address=$6; \
 target(0).service.port=$19; \
 target(0).service.protocol=UDP; \
 last

# Netfilter ICMP Matching 
# No log sample; please submit
regex=Accept IN=(\w*) OUT=(\w*)( MAC=)?([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=ICMP (INCOMPLETE \[\d+ bytes\] )?TYPE=(\d+) CODE=(\d+) (INCOMPLETE \[\d+ bytes\] )?(ID=\d+ SEQ=\d+ )?(PARAMETER=\d+ )?(GATEWAY=[\d\.]+ )?(\[\w+\])?(MTU=\d+ )?; \
 classification.text=ICMP packet accepted; \
 id=1304; \
 revision=2; \
 analyzer(0).name=netfilter; \
 analyzer(0).manufacturer=www.netfilter.org; \
 analyzer(0).class=Firewall; \
 assessment.impact.completion=succeeded; \
 assessment.impact.type=other; \
 assessment.impact.severity=low; \
 assessment.impact.description=Netfilter accepted an ICMP packet $5 -> $6 type=$18 code=$19 on interface $1$2 [TTL=$10]; \
 source(0).node.address(0).category=ipv4-addr; \
 source(0).node.address(0).address=$4; \
 source(0).service.protocol=ICMP; \
 target(0).interface=$1; \
 target(0).node.address(0).category=ipv4-addr; \
 target(0).node.address(0).address=$6; \
 target(0).service.protocol=ICMP; \
 last

# No log sample; please submit
regex=Drop IN=(\w*) OUT=(\w*)( MAC=)?([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=ICMP (INCOMPLETE \[\d+ bytes\] )?TYPE=(\d+) CODE=(\d+) (INCOMPLETE \[\d+ bytes\] )?(ID=\d+ SEQ=\d+ )?(PARAMETER=\d+ )?(GATEWAY=[\d\.]+ )?(\[\w+\])?(MTU=\d+ )?; \
 classification.text=ICMP packet dropped; \
 id=1305; \
 revision=2; \
 analyzer(0).name=netfilter; \
 analyzer(0).manufacturer=www.netfilter.org; \
 analyzer(0).class=Firewall; \
 assessment.impact.completion=failed; \
 assessment.impact.type=other; \
 assessment.impact.severity=medium; \
 assessment.impact.description=Netfilter dropped an ICMP packet $5 -> $6 type=$18 code=$19 on interface $1$2 [TTL=$10]; \
 source(0).node.address(0).category=ipv4-addr; \
 source(0).node.address(0).address=$4; \
 source(0).service.protocol=ICMP; \
 target(0).interface=$1; \
 target(0).node.address(0).category=ipv4-addr; \
 target(0).node.address(0).address=$6; \
 target(0).service.protocol=ICMP; \
 last

#
## End of Part I


## Part II : Usual matching with no improvement
#  
#  The trouble here is that we don't know what is really matched : an accepted or a dropped packet...
#  Netfilter does not talk about that, but can even match them to improve intrusion detection easily.
#  

# Netfilter TCP Matching
# No log sample; please submit  
#regex=(?<!Accept )(?<!Drop )IN=(\w*) OUT=(\w*)( MAC=)?([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=TCP (INCOMPLETE \[\d+ bytes\] )?SPT=(\d+) DPT=(\d+) (SEQ=\d+ ACK=\d+ )?WINDOW=(\d+) RES=(\w+) (CWR )?(ECE )?(URG )?(ACK )?(PSH )?(RST )?(SYN )?(FIN )?URGP=(\d+); \
# classification.text=TCP packet matched; \
# id=1306; \
# revision=1; \
# analyzer(0).name=netfilter; \
# analyzer(0).manufacturer=www.netfilter.org; \
# analyzer(0).class=Firewall; \
# assessment.impact.completion=failed; \
# assessment.impact.type=other; \
# assessment.impact.severity=medium; \
# assessment.impact.description=Matching TCP packet $5:$18 -> $6:$19 [$25 $26 $27 $28 $29 $30] on interface $1$2 [ TTL=$10 ]; \
# source(0).interface=$1; \
# source(0).node.address(0).category=ipv4-addr; \
# source(0).node.address(0).address=$5; \
# source(0).service.port=$18; \
# source(0).service.protocol=TCP; \
# target(0).interface=$2; \
# target(0).node.address(0).category=ipv4-addr; \
# target(0).node.address(0).address=$6; \
# target(0).service.port=$19; \
# target(0).service.protocol=TCP; \
# last

# Netfilter UDP Matching 
# No log sample; please submit
#regex=(?<!Accept )(?<!Drop )IN=(\w*) OUT=(\w*)( MAC=)?([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=UDP (INCOMPLETE \[\d+ bytes\] )?SPT=(\d+) DPT=(\d+) LEN=(\d+); \
# classification.text=UDP packet matched; \
# id=1307; \
# revision=1; \
# analyzer(0).name=netfilter; \
# analyzer(0).manufacturer=www.netfilter.org; \
# analyzer(0).class=Firewall; \
# assessment.impact.completion=failed; \
# assessment.impact.type=other; \
# assessment.impact.severity=medium; \
# assessment.impact.description=Matching UDP packet $5:$18 -> $6:$19 on interface $1$2 [TTL=$10]; \
# source(0).interface=$1; \
# source(0).node.address(0).category=ipv4-addr; \
# source(0).node.address(0).address=$5; \
# source(0).service.port=$18; \
# source(0).service.protocol=UDP; \
# target(0).interface=$2; \
# target(0).node.address(0).category=ipv4-addr; \
# target(0).node.address(0).address=$6; \
# target(0).service.port=$19; \
# target(0).service.protocol=UDP; \
# last

# Netfilter ICMP Matching 
# No log sample; please submit
#regex=(?<!Accept )(?<!Drop )IN=(\w*) OUT=(\w*)( MAC=)?([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=ICMP (INCOMPLETE \[\d+ bytes\] )?TYPE=(\d+) CODE=(\d+) (INCOMPLETE \[\d+ bytes\] )?(ID=\d+ SEQ=\d+ )?(PARAMETER=\d+ )?(GATEWAY=[\d\.]+ )?(\[\w+\])?(MTU=\d+ )?; \
# classification.text=ICMP packet matched; \
# id=1308; \
# revision=1; \
# analyzer(0).name=netfilter; \
# analyzer(0).manufacturer=www.netfilter.org; \
# analyzer(0).class=Firewall; \
# assessment.impact.completion=failed; \
# assessment.impact.type=other; \
# assessment.impact.severity=medium; \
# assessment.impact.description=Matching ICMP packet $5 -> $6 type=$18 code=$19 on interface $1$2 [TTL=$10]; \
# source(0).interface=$1; \
# source(0).node.address(0).category=ipv4-addr; \
# source(0).node.address(0).address=$5; \
# source(0).service.protocol=ICMP; \
# target(0).interface=$2; \
# target(0).node.address(0).category=ipv4-addr; \
# target(0).node.address(0).address=$6; \
# target(0).service.protocol=ICMP; \
# last

# Netfilter AH and ESP Matching for IPSEC
# No log sample; please submit
#regex=IN=(\w*) OUT=(\w*)( MAC=)?([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=(AH|ESP) (INCOMPLETE \[\d+ bytes\] )?SPI=(\w+); \
# classification.text=$17 packet matched; \
# id=1309; \
# revision=1; \
# analyzer(0).name=netfilter; \
# analyzer(0).manufacturer=www.netfilter.org; \
# analyzer(0).class=Firewall; \
# assessment.impact.completion=failed; \
# assessment.impact.type=other; \
# assessment.impact.severity=medium; \
# assessment.impact.description=Matching $17 packet $5 -> $6 SPI=$19 on interface $1$2 [TTL=$10]; \
# source(0).interface=$1; \
# source(0).node.address(0).category=ipv4-addr; \
# source(0).node.address(0).address=$5; \
# source(0).service.protocol=$17; \
# target(0).interface=$2; \
# target(0).node.address(0).category=ipv4-addr; \
# target(0).node.address(0).address=$6; \
# target(0).service.protocol=$17; \
# last

# Other protocols matched by Netfilter
#regex=IN=(\w*) OUT=(\w*)( MAC=)?([\w:]+)? SRC=([\d\.]+) DST=([\d\.]+) LEN=(\d+) TOS=(\w+) PREC=(\w+) TTL=(\d+) ID=(\d+) (CE )?(DF )?(MF )?(FRAG:\d+ )?(OPT \(\w+\) )?PROTO=(\d+); \
# classification.text=$17 packet matched; \
# id=1310; \
# revision=1; \
# analyzer(0).name=netfilter; \
# analyzer(0).manufacturer=www.netfilter.org; \
# analyzer(0).class=Firewall; \
# assessment.impact.completion=failed; \
# assessment.impact.type=other; \
# assessment.impact.severity=medium; \
# assessment.impact.description=Matching a packet from the protocol number $17 : $5 -> $6 on interface $1$2 [TTL=$10]; \
# source(0).interface=$1; \
# source(0).node.address(0).category=ipv4-addr; \
# source(0).node.address(0).address=$5; \
# source(0).service.protocol=$17; \
# target(0).interface=$2; \
# target(0).node.address(0).category=ipv4-addr; \
# target(0).node.address(0).address=$6; \
# target(0).service.protocol=$17; \
# last

#
## End of Part II

